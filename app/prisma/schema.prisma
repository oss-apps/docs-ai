// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Example {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    approved      Boolean   @default(true)
    accounts      Account[]
    sessions      Session[]
    userOrgs      OrgUser[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

enum Plan {
    FREE
    BASIC
    PROFESSIONAL
    ENTERPRISE
}

model Org {
    id                String         @id @default(cuid())
    name              String         @unique
    displayName       String?
    createdAt         DateTime       @default(now())
    updatedAt         DateTime       @updatedAt
    orgUrl            String?
    imageUrl          String?
    plan              Plan           @default(FREE)
    stripeCustomerId  String?        @unique
    isActive          Boolean        @default(false)
    chatCredits       Int            @default(30)
    documentTokens    BigInt         @default(0)
    paymentsUpdatedAt DateTime?      @default(now())
    orgUsers          OrgUser[]
    projects          Project[]
    subscriptions     Subscription[]
}

model Subscription {
    id           String    @id
    orgId        String
    status       String
    priceId      String
    createdAt    DateTime  @default(now())
    updatedAt    DateTime  @updatedAt
    amount       Int       @default(0)
    currentStart DateTime?
    currentEnd   DateTime?
    org          Org       @relation(fields: [orgId], references: [id], onDelete: Cascade)
}

model OrgUser {
    orgId  String
    userId String
    org    Org    @relation(fields: [orgId], references: [id], onDelete: Cascade)
    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@id([orgId, userId])
}

model Project {
    id               String             @id @default(cuid())
    name             String
    slug             String
    description      String?            @db.Text
    createdAt        DateTime           @default(now())
    updatedAt        DateTime           @updatedAt
    orgId            String
    initialised      Boolean            @default(false)
    public           Boolean            @default(true)
    botName          String             @default("Jarvis")
    defaultQuestion  String             @default("How to use Jarvis?") @db.Text
    enableSummary    Boolean            @default(true)
    org              Org                @relation(fields: [orgId], references: [id], onDelete: Cascade)
    tokensUsed       Int                @default(0)
    chatUsed         Int                @default(0)
    documentTokens   BigInt             @default(0)
    generateSummary  Boolean            @default(false)
    documents        Document[]
    Conversation     Conversation[]
    slackInstalation SlackInstallation?
    projectToken     ProjectToken?

    @@unique([orgId, slug])
}

model ProjectToken {
    id            String   @id @default(cuid())
    updatedAt     DateTime @updatedAt
    projectId     String   @unique
    projectApiKey String   @db.Text
    project       Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
}

enum DocumentType {
    URL
    CHAT
    TEXT
    PDF
}

enum IndexStatus {
    INDEXING
    SUCCESS
    FAILED
}

model Document {
    id           String       @id @default(cuid())
    src          String       @db.Text
    title        String?      @db.Text
    description  String?      @db.Text
    createdAt    DateTime     @default(now())
    updatedAt    DateTime     @updatedAt
    documentType DocumentType
    indexed      Boolean      @default(false)
    indexStatus  IndexStatus  @default(INDEXING)
    projectId    String
    tokens       Int          @default(0)
    details      Json?
    project      Project      @relation(fields: [projectId], references: [id], onDelete: Cascade)
}

enum ConvoRating {
    POSITIVE
    NEGATIVE
    NEUTRAL
}

model Conversation {
    id         String      @id @default(cuid())
    createdAt  DateTime    @default(now())
    updatedAt  DateTime    @updatedAt
    projectId  String
    summary    String?     @db.Text
    rating     ConvoRating
    feedback   String?     @db.Text
    internal   Boolean     @default(false)
    firstMsg   String      @db.Text
    messages   Messages[]
    tokensUsed Int         @default(0)
    project    Project     @relation(fields: [projectId], references: [id], onDelete: Cascade)
}

enum MessageUser {
    user
    assistant
}

model Messages {
    id      String       @id @default(cuid())
    message String       @db.Text
    user    MessageUser
    convoId String
    sources String?      @db.Text
    convo   Conversation @relation(fields: [convoId], references: [id], onDelete: Cascade)
}

model SlackInstallation {
    id          String  @id @default(cuid())
    projectId   String  @unique()
    accessToken String  @db.Text
    teamId      String
    teamName    String
    botUserId   String
    project     Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
}
